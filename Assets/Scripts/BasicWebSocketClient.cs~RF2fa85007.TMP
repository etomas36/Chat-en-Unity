using System;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using WebSocketSharp;
using static UnityEngine.UIElements.UxmlAttributeDescription;

public class BasicWebSocketClient : MonoBehaviour
{
    // Instancia del cliente WebSocket
    public string uri = "ws://127.0.0.1:7777/";
    private WebSocket ws;
    public TMP_Text chatDisplay;
    public TMP_InputField inputField;
    public Button sendButton;
    public ScrollRect scrollRect;
    private static readonly Queue<Action> _actionsToRun = new Queue<Action>();


    // Se ejecuta al iniciar la escena
    void Start()
    {
        //Limpiar el chatDisplay
        chatDisplay.text = "";


        // Crear una instancia del WebSocket apuntando a la URI del servidor
        ws = new WebSocket(uri);

        // Evento OnOpen: se invoca cuando se establece la conexión con el servidor
        ws.OnOpen += (sender, e) =>
        {

            Debug.Log("WebSocket conectado correctamente.");
        };

        // Evento OnMessage: se invoca cuando se recibe un mensaje del servidor
        ws.OnMessage += (sender, e) =>
        {
            // Comprueba si el mensaje no está vacío
            if (!string.IsNullOrEmpty(e.Data))
            {
                Debug.Log("Mensaje recibido: " + e.Data);

                

                chatDisplay.text += "\n" + e.Data;

            }
            else
            {
                Debug.LogWarning("Se recibió un mensaje vacío.");
            }
        };

        // Evento OnError: se invoca cuando ocurre un error en la conexión
        ws.OnError += (sender, e) =>
        {
            Debug.LogError("Error en el WebSocket: " + e.Message);
        };

        // Evento OnClose: se invoca cuando se cierra la conexión con el servidor
        ws.OnClose += (sender, e) =>
        {
            Debug.Log("WebSocket cerrado. Código: " + e.Code + ", Razón: " + e.Reason);
        };

        // Conectar de forma asíncrona al servidor WebSocket
        ws.ConnectAsync();

        inputField.Select();
        inputField.ActivateInputField();
    }

    // Método para enviar un mensaje al servidor (puedes llamarlo, por ejemplo, desde un botón en la UI)
    public void SendMessageToServer()
    {
        if (ws != null && ws.ReadyState == WebSocketState.Open)
        {
            if (!string.IsNullOrEmpty(inputField.text))
            {
                string message = inputField.text;
                inputField.text = "";
                inputField.ActivateInputField();
                ws.Send(message);
            }
        }
        else
        {
            Debug.LogError("No se puede enviar el mensaje. La conexión no está abierta.");
        }
    }

    // Se ejecuta cuando el objeto se destruye (por ejemplo, al cambiar de escena o cerrar la aplicación)
    void OnDestroy()
    {
        if (ws != null)
        {
            ws.Close();
            ws = null;
        }
    }


    private void EnqueueUiAction(Action action)
    {
        lock (_actionsToRun)
        {
            _actionsToRun.Enqueue(action);
        }
    }
}
